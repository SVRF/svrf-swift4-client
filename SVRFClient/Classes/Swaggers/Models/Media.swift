//
// Media.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class Media: Codable {

    /** Whether the Media is adult content */
    public var adult: Bool?
    /** The Media&#39;s authors. This should be displayed when possible. */
    public var authors: [String]?
    /** The canonical page this Media can be found at via SVRF. */
    public var canonical: String?
    /** A description of the Media */
    public var description: String?
    /** The duration of the Media in seconds. */
    public var duration: Double?
    /** An &#x60;&lt;iframe&gt;&#x60; tag that embeds a player that plays the Media. */
    public var embedHtml: String?
    /** A player that can be embedded using an &#x60;&lt;iframe&gt;&#x60; tag to play the Media. */
    public var embedUrl: String?
    public var files: MediaFiles?
    /** The height, in pixels, of the Media&#39;s source */
    public var height: Double?
    /** The unique ID of this Media */
    public var id: String?
    /** The site that this Media came from. This should be displayed when possible. */
    public var site: String?
    /** The title of the Media, suitable for displaying */
    public var title: String?
    public var type: MediaType?
    /** The original page this Media is located at. */
    public var url: String?
    /** The width, in pixels, of the Media&#39;s source */
    public var width: Double?


    
    public init(adult: Bool?, authors: [String]?, canonical: String?, description: String?, duration: Double?, embedHtml: String?, embedUrl: String?, files: MediaFiles?, height: Double?, id: String?, site: String?, title: String?, type: MediaType?, url: String?, width: Double?) {
        self.adult = adult
        self.authors = authors
        self.canonical = canonical
        self.description = description
        self.duration = duration
        self.embedHtml = embedHtml
        self.embedUrl = embedUrl
        self.files = files
        self.height = height
        self.id = id
        self.site = site
        self.title = title
        self.type = type
        self.url = url
        self.width = width
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(adult, forKey: "adult")
        try container.encodeIfPresent(authors, forKey: "authors")
        try container.encodeIfPresent(canonical, forKey: "canonical")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(duration, forKey: "duration")
        try container.encodeIfPresent(embedHtml, forKey: "embedHtml")
        try container.encodeIfPresent(embedUrl, forKey: "embedUrl")
        try container.encodeIfPresent(files, forKey: "files")
        try container.encodeIfPresent(height, forKey: "height")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(site, forKey: "site")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(url, forKey: "url")
        try container.encodeIfPresent(width, forKey: "width")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        adult = try container.decodeIfPresent(Bool.self, forKey: "adult")
        authors = try container.decodeIfPresent([String].self, forKey: "authors")
        canonical = try container.decodeIfPresent(String.self, forKey: "canonical")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        duration = try container.decodeIfPresent(Double.self, forKey: "duration")
        embedHtml = try container.decodeIfPresent(String.self, forKey: "embedHtml")
        embedUrl = try container.decodeIfPresent(String.self, forKey: "embedUrl")
        files = try container.decodeIfPresent(MediaFiles.self, forKey: "files")
        height = try container.decodeIfPresent(Double.self, forKey: "height")
        id = try container.decodeIfPresent(String.self, forKey: "id")
        site = try container.decodeIfPresent(String.self, forKey: "site")
        title = try container.decodeIfPresent(String.self, forKey: "title")
        type = try container.decodeIfPresent(MediaType.self, forKey: "type")
        url = try container.decodeIfPresent(String.self, forKey: "url")
        width = try container.decodeIfPresent(Double.self, forKey: "width")
    }
}

