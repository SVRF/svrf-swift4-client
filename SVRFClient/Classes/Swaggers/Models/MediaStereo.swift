//
// MediaStereo.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Resized versions of the Media, matching the Media&#39;s type, in stereo. Only included if the Media is stereoscopic. Resolutions larger than the original size will not be included (the original is included as &#x60;max&#x60;). */

open class MediaStereo: Codable {

    /** 848px wide video with a 1.3MBps video rate, 96KBps audio rate. Only included if the Media is a &#x60;video&#x60;. */
    public var _848: String?
    /** 1440px wide video with a 4.4MBps video rate, 128KBps audio rate. Only included if the Media is a &#x60;video&#x60;. */
    public var _1440: String?
    /** 2160px wide video with a 10MBps video rate, 192KBps audio rate. Only included if the Media is a &#x60;video&#x60;. */
    public var _2160: String?
    /** 4096px wide image. This image should be used on mobile devices, as larger images may cause some devices to crash. Only included if the Media is a &#x60;photo&#x60;. */
    public var _4096: String?
    /** URL for an HLS master playlist containing streams in all of the above resolutions which are no wider than the original Media. Only included if the Media is a &#x60;video&#x60;. */
    public var hls: String?
    /** The Media in its largest available size (the original size). */
    public var max: String?


    
    public init(_848: String?, _1440: String?, _2160: String?, _4096: String?, hls: String?, max: String?) {
        self._848 = _848
        self._1440 = _1440
        self._2160 = _2160
        self._4096 = _4096
        self.hls = hls
        self.max = max
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(_848, forKey: "848")
        try container.encodeIfPresent(_1440, forKey: "1440")
        try container.encodeIfPresent(_2160, forKey: "2160")
        try container.encodeIfPresent(_4096, forKey: "4096")
        try container.encodeIfPresent(hls, forKey: "hls")
        try container.encodeIfPresent(max, forKey: "max")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        _848 = try container.decodeIfPresent(String.self, forKey: "848")
        _1440 = try container.decodeIfPresent(String.self, forKey: "1440")
        _2160 = try container.decodeIfPresent(String.self, forKey: "2160")
        _4096 = try container.decodeIfPresent(String.self, forKey: "4096")
        hls = try container.decodeIfPresent(String.self, forKey: "hls")
        max = try container.decodeIfPresent(String.self, forKey: "max")
    }
}

