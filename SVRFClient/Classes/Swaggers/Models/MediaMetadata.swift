//
// MediaMetadata.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Metadata about the Media */

open class MediaMetadata: Codable {

    /** For 3D Media, denotes that this model contains blend shapes, but having to calculate and apply weights to them is not required. These are models like glasses, hats, and billboards that do not react to face movement. */
    public var hasBlendShapes: Bool?
    /** For 3D Media, denotes that this model can be applied as a Face Filter overlay on a video of a face. */
    public var isFaceFilter: Bool?
    /** For 3D Media, denotes that calculating and applying blend shape weights to this model is _required_ for the correct experience. If your platform cannot detect and calculate blend shape weights you MUST NOT present these models to your users. */
    public var requiresBlendShapes: Bool?


    
    public init(hasBlendShapes: Bool?, isFaceFilter: Bool?, requiresBlendShapes: Bool?) {
        self.hasBlendShapes = hasBlendShapes
        self.isFaceFilter = isFaceFilter
        self.requiresBlendShapes = requiresBlendShapes
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(hasBlendShapes, forKey: "hasBlendShapes")
        try container.encodeIfPresent(isFaceFilter, forKey: "isFaceFilter")
        try container.encodeIfPresent(requiresBlendShapes, forKey: "requiresBlendShapes")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        hasBlendShapes = try container.decodeIfPresent(Bool.self, forKey: "hasBlendShapes")
        isFaceFilter = try container.decodeIfPresent(Bool.self, forKey: "isFaceFilter")
        requiresBlendShapes = try container.decodeIfPresent(Bool.self, forKey: "requiresBlendShapes")
    }
}

