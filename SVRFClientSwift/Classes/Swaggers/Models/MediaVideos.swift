//
// MediaVideos.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Resized &#x60;mp4&#x60; (&#x60;H.264&#x60;) videos of the Media. Only included if the Media is &#x60;video&#x60;. Resolutions larger than the original size will not be included (the original is included as &#x60;max&#x60;). For stereoscopic content, this will be a monoscopic version of the top or left channel. */

open class MediaVideos: Codable {

    /** 848px wide video with a 1.3MBps video rate, 96KBps audio rate. */
    public var _848: String?
    /** 1440px wide video with a 4.4MBps video rate, 128KBps audio rate. */
    public var _1440: String?
    /** 2160px wide video with a 10MBps video rate, 192KBps audio rate. */
    public var _2160: String?
    /** A 6-second, 1440px wide clip, with a 2MBps video rate, no audio. */
    public var clip: String?
    /** URL for an HLS master playlist containing streams in all of the above resolutions which are no wider than the original Media. This should be used for streaming unless the platform does not support HLS. */
    public var hls: String?
    /** Maximum resolution video (original source video), &#x60;width&#x60; pixels wide at unspecified video and audio rates. */
    public var max: String?


    
    public init(_848: String?, _1440: String?, _2160: String?, clip: String?, hls: String?, max: String?) {
        self._848 = _848
        self._1440 = _1440
        self._2160 = _2160
        self.clip = clip
        self.hls = hls
        self.max = max
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(_848, forKey: "848")
        try container.encodeIfPresent(_1440, forKey: "1440")
        try container.encodeIfPresent(_2160, forKey: "2160")
        try container.encodeIfPresent(clip, forKey: "clip")
        try container.encodeIfPresent(hls, forKey: "hls")
        try container.encodeIfPresent(max, forKey: "max")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        _848 = try container.decodeIfPresent(String.self, forKey: "848")
        _1440 = try container.decodeIfPresent(String.self, forKey: "1440")
        _2160 = try container.decodeIfPresent(String.self, forKey: "2160")
        clip = try container.decodeIfPresent(String.self, forKey: "clip")
        hls = try container.decodeIfPresent(String.self, forKey: "hls")
        max = try container.decodeIfPresent(String.self, forKey: "max")
    }
}

